Чтобы это начало работать попробуем заново изобрести обмен сообщениями между процессами разных реальных пользователей - назовём такой сервис агентами. Агенты будут распоряжаться сокетами и данными процессов таким образом, чтобы получая запросы от пользователей и посылая их общим программам, соблюдать правила приоретизации потоков, примерно как это сделано в сетевых протоколах QoS, только работать с трафиком внутри процессов.
для каждой общей программы должен быть свой агент и ещё один агент-супервизор, балансирующий нагрузку на цп и распределение ресурсов между агентами и реальными пользователями в целом. более точно можно это описать как прокси сервис, который в целом балансирует нагрузку на канал и сохраняет определённые данные для последующего использования.
также как и в чатах вообще-то нам не нужно две сотни разных протоколов и серверов для того, чтобы перекинуться парой строчек с другом, и не нужно для каждого друга открывать свой чат клиент, можно в том же клиенте открыть дополнительный интерфейс и эту модель можно использовать в системном программировании, по факту её уже используют - например веб сервисы и базы данных.
просто немного абстрагируемся и предположим, что один компьютер выполняет функцию декодирования видео, а второй передачи данных - естественно нагрузка на цп второго будет выше, но если мы сможем подключить цп второго к декодированию? нам нужно сообщение между ними (это уже сделано в моделях render-farm), но если цп одного в разы мощнее цп второго, то первый сможет декодировать самостоятельно, а в добавок ещё и взять поток с другого цп.
тогда нужно организовать передачу данных на первый цп (допустим у нас гигабитный канал во внутренней сети) и принимать команды от второго пользователя о перемотке и прочем - это можно сделать. Но теперь допустим, что у нас есть главный хост с мощным процессором (это сервер с 8 процессорами) и пачка сателитов - монитор+клавиатура+embeddedcpu, нам не нужно для каждого загружать ОС с сервера, нужны базовые сервисы для общения с сервером, а серверу для каждого спутника не нужно запускать по 10 одних и тех же процессов, нужно запустить один общий процесс и уметь раздавать и получать данные для этого процесса от всех пользователей.
Примерно вот такая модель, но допустим у нас несколько пользователей работают с одним компилятором на сервере - каждый хочет использовать все ресурсы сразу, поэтому они запускают каждый свой инстанс компилятора и вешают систему намертво, примерно на часик, вот чтобы такой ситуации избежать, вводится агент-супервизор, который может быть вызван пользователями или процессами для балансировки нагрузки и распределния ресурсов между пользователями и программами, через супервизора проходит общение между агентами программ, он может обрабатывать статистику загрузки, применять сценарии, то есть регулировать тонкими инструментами, которые могут быть настроены настоящим-root-пользователем.
вообще примерно это уже сделано в программах параллельного вычисления, рендер-фермах или даже squid, nginx+fpm то есть прямо такого велосипеда не надо делать, а всего лишь обобщить знания и применить их в новом свете.
в принципе часть проблем между сетевыми машинами можно решить с помощью squashfs модулей, как это сделано в магос, то есть передавать на клиентский хост файловую систему с необходимыми рабочими файлами, для конкретной программы, эти файлы могут там и сохраняться, но это частный случай параллелизации, в общем случае, нужен унифицированный стэк библиотек для нескольких типов программ, который пользователь будет загружать в своё локальное виртуальное ядро и получается, что это также можно решить с помощью squashfs.
